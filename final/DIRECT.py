import math as math
from scipy import optimize as op
import matplotlib.pyplot as plt
from sim import signal_sim

# 0 == empty
# 1 == wall
# 3 == receiver
m1 =[
    [3, 3, 3, 1, 3, 3, 1, 3, 3, 3],
    [3, 0, 0, 0, 0, 0, 0, 0, 0, 3],
    [3, 0, 0, 1, 0, 0, 1, 0, 0, 3],
    [3, 0, 0, 1, 0, 0, 1, 0, 0, 3],
    [1, 1, 1, 1, 0, 0, 1, 1, 1, 1],
    [3, 0, 0, 0, 0, 0, 0, 0, 0, 3],
    [3, 0, 0, 0, 0, 0, 0, 0, 0, 3],
    [1, 0, 1, 1, 0, 0, 1, 1, 1, 1],
    [3, 0, 0, 1, 0, 0, 0, 0, 0, 3],
    [3, 3, 3, 1, 3, 3, 1, 3, 3, 3]
]

m2 =[
    [0, 0, 0, 1, 0, 0, 1, 0, 0, 0],
    [0, 0, 0, 0, 0, 0, 0, 0, 3, 0],
    [0, 3, 0, 1, 0, 0, 1, 0, 0, 0],
    [0, 0, 0, 1, 0, 0, 1, 0, 0, 0],
    [1, 1, 1, 1, 0, 0, 1, 1, 1, 1],
    [0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
    [0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
    [1, 0, 1, 1, 0, 0, 1, 1, 1, 1],
    [0, 0, 3, 1, 0, 0, 0, 0, 3, 0],
    [0, 0, 0, 1, 0, 0, 1, 0, 0, 0]
]

m2_2 =[
    [3, 0, 3, 1, 3, 0, 1, 3, 0, 3],
    [0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
    [0, 3, 0, 1, 3, 0, 1, 0, 3, 0],
    [0, 0, 0, 1, 0, 0, 1, 0, 0, 0],
    [1, 1, 1, 1, 0, 0, 1, 1, 1, 1],
    [3, 0, 3, 0, 3, 0, 3, 0, 3, 0],
    [0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
    [1, 0, 1, 1, 0, 0, 1, 1, 1, 1],
    [0, 3, 0, 1, 3, 0, 3, 0, 3, 0],
    [0, 0, 0, 1, 0, 0, 1, 0, 0, 0]
]

m3 = [
    [3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,],
    [3,0,0,1,0,0,0,1,0,0,0,1,0,0,0,1,0,0,0,1,0,0,0,3,],
    [3,0,0,1,0,0,0,1,0,0,0,1,0,0,0,1,0,0,0,1,0,0,0,3,],
    [3,1,0,1,1,0,1,1,1,0,1,1,1,0,1,1,1,0,1,1,1,0,1,3,],
    [3,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,3,],
    [3,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,3,],
    [3,0,0,1,1,1,0,1,1,1,1,1,0,0,1,1,1,1,1,1,1,1,1,3,],
    [3,0,0,1,0,0,0,0,0,0,0,1,0,0,1,0,0,0,0,0,0,0,0,3,],
    [3,0,0,1,0,0,0,1,1,1,1,1,0,0,1,0,0,0,0,0,0,0,0,3,],
    [3,0,0,1,0,0,0,0,0,0,0,1,0,0,1,1,0,1,1,1,1,0,1,3,],
    [3,0,0,1,0,0,0,0,0,0,0,1,0,0,1,0,0,0,1,0,0,0,0,3,],
    [3,0,0,1,0,0,0,0,0,0,0,1,0,0,1,0,0,0,1,0,0,0,0,3,],
    [3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,]
]

m4 = [
    [1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,],
    [1,0,0,1,0,0,0,1,0,0,0,1,0,0,0,1,0,0,0,1,0,0,0,1,],
    [1,3,0,1,0,3,0,1,0,3,0,1,0,3,0,1,0,3,0,1,0,3,0,1,],
    [1,1,0,1,1,0,1,1,1,0,1,1,1,0,1,1,1,0,1,1,1,0,1,1,],
    [1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,],
    [1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,],
    [1,0,0,1,1,1,0,1,1,1,1,1,0,0,1,1,1,1,1,1,1,1,1,1,],
    [1,0,0,1,0,0,0,0,0,0,0,1,0,0,1,0,0,0,0,3,0,0,0,1,],
    [1,0,0,1,0,0,0,1,1,1,1,1,0,0,1,0,0,0,0,0,0,0,0,1,],
    [1,0,0,1,0,0,0,0,0,0,0,1,0,0,1,1,0,1,1,1,1,0,1,1,],
    [1,0,0,1,0,0,0,3,0,0,0,1,0,0,1,0,3,0,1,0,0,3,0,1,],
    [1,0,0,1,0,0,0,0,0,0,0,1,0,0,1,0,0,0,1,0,0,0,0,1,],
    [1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,],
]

m5 = [
    [1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,],
    [1,3,0,1,3,0,3,1,3,0,3,1,3,0,3,1,3,0,3,1,3,0,3,1,],
    [1,0,0,1,0,0,0,1,0,0,0,1,0,0,0,1,0,0,0,1,0,0,0,1,],
    [1,1,3,1,1,3,1,1,1,3,1,1,1,3,1,1,1,3,1,1,1,3,1,1,],
    [1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,],
    [1,3,0,3,0,3,0,3,0,3,0,3,0,3,0,3,0,3,0,3,0,3,0,1,],
    [1,0,0,1,1,1,0,1,1,1,1,1,0,0,1,1,1,1,1,1,1,1,1,1,],
    [1,0,3,1,3,0,3,0,3,0,3,1,3,0,1,0,3,0,3,0,3,0,3,1,],
    [1,0,0,1,0,0,0,1,1,1,1,1,0,0,1,0,0,0,0,0,0,0,0,1,],
    [1,3,0,1,3,0,3,0,3,0,3,1,3,0,1,1,3,1,1,1,1,3,1,1,],
    [1,0,0,1,0,0,0,0,0,0,0,1,0,0,1,0,0,0,1,0,0,0,0,1,],
    [1,0,3,1,0,3,0,3,0,3,0,1,0,3,1,3,0,3,1,3,0,3,0,1,],
    [1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,],
]

map1 = [
    "1111111111111111111111111111111111111111",
    "1000001000000010000000000100010000000001",
    "1000001000000000000000000100000000000001",
    "1000001000000010000000000100010000000001",
    "1101111111111011111111111100011111111111",
    "1000000000000000000000000000000000000001",
    "1000000000000000000000000000000000000001",
    "1000000000000000000000000000000000000001",
    "1000110111011101110111011101110111011001",
    "1000100010001000100010001000100010001001",
    "1000100010001000100010001000100010001001",
    "1000111111111111111111111111111111111001",
    "1000100010001000100010001000100010001001",
    "1000100010001000100010001000100010001001",
    "1000110111011101110111011101110111011001",
    "1000000000000000000000000000000000000001",
    "1000000000000000000000000000000000000001",
    "1000000000000000000000000000000000000001",
    "1111111111111111111111111111111111111111",
]

map1_man = [
    "1111111111111111111111111111111111111111",
    "1000001000000010000000000100010000000001",
    "1003001003000000000030000100000000300001",
    "1000001000000010000000000100010000000001",
    "1101111111111011111111111100011111111111",
    "1000000000000000000000000000000000000001",
    "1000000000000000000030000000000000000001",
    "1000000000000000000000000000000000000001",
    "1000110111011101110111011101110111011001",
    "1000103010301030103010301030103010301001",
    "1000100010001000100010001000100010001001",
    "1030111111111111111111111111111111111031",
    "1000100010001000100010001000100010001001",
    "1000103010301030103010301030103010301001",
    "1000110111011101110111011101110111011001",
    "1000000000000000000000000000000000000001",
    "1000000000000000000300000000000000000001",
    "1000000000000000000000000000000000000001",
    "1111111111111111111111111111111111111111",
]

#21
map2 = [
    "00000000000000000000000000010000010000000000000000000000000000000000000000000000000000000000",
    "00000000000000000000000000010000010000000000000000000000000000000000000000000000000000000000",
    "00000000000000000000000000010000010000000000000000000000000000000000000000000000000000000000",
    "00000000000000000000000000010000010000000000000000000000000000000000000000000000000000000000",
    "00000000000000000000000000010000010000000000000000000000000000000000000000000000000000000000",
    "00000000000000000000000000010000010000000000000000000000000000000000000000000000000000000000",
    "00000000000000000000000000010000010000000000000000000000000000000000000000000000000000000000",
    "00000000000000000000000000010000010000000000000000000000000000000000000000000000000000000000",
    "00000000000000000000000000010000010000000000000000000000000000000000000000000000000000000000",
    "00000000000000000000000000010000010000000000000000000000000000000000000000000000000000000000",
    "00000000000000000000000000010000010000000000000000000000000000000000000000000000000000000000",
    "11111111111111111111111111110000010000000000000000000000000000000000000000000000000000000000",
    "00000000000000000000000000010000010000000000000000000000000000000000000000000000000000000000",
    "00000000000000000000000000010000010000000000000000000000000000000000000000000000000000000000",
    "00000000000000000000000000010000011111111111111111111111111111111111111111111111111111111111",
    "00000000000000000000000000010000000000000000000000000000000000000000000000000000000000000000",
    "00000000000000000000000000010000000000000000000000000000000000000000000000000000000000000000",
    "00000000000000000000000000010000000000000000000000000000000000000000000000000000000000000000",
    "00000000000000000000000000010000000000000000000000000000000000000000000000000000000000000000",
    "00000000000000000000000000010000000000000000000000000000000000000000000000000000000000000000",
    "11111111111111111111111111110000011111111111111111111111111111111111111111111111111111111111",
    "00000000000000000000000000010000010000000000000000000000000000000000000000000000000000000000"
]

map2_man = [
    "00000000000000000000000000010000010000000000000000000000000000000000000000000000000000000000",
    "00000000000000000000000000010000010000000000000000000000000000000000000000000000000000000000",
    "00030000000000000000300000010000010000000000000000000000000000000000000000000000000000000000",
    "00000000000000000000000000010000010000000000000300000000000000000000000000000000003000000000",
    "00000000000300000000000000010030010000000000000000000000000000000000000000000000000000000000",
    "00000000000000000000000000010000010000000000000000000000000000000000000000000000000000000000",
    "00000000000000000000000000010000010000000000000000000000000000000300000000000000000000000000",
    "00000000000000000000000000010000010000000000000000000000000000000000000000000000000000000000",
    "00003000000000000030000000010000010000000000000000000000000000000000000000000000000000000000",
    "00000000000000000000000000010000010000000000000000000000000000000000000000000000000000000000",
    "00000000000000000000000000010000010000000000030000000000000000000000000000000000000300000000",
    "11111111111111111111111111110000010000000000000000000000000000000000000000000000000000000000",
    "00000000000000000000000000010000010000000000000000000000000000000000000000000000000000000000",
    "00003000000000000000300000010000010000000000000000000000000000000000000000000000000000000000",
    "00000000000000000000000000010000011111111111111111111111111111111111111111111111111111111111",
    "00000000003000000000000000010000000000000000000000000000000000000000000000000000000000000000",
    "00000000000000000000000000010000000000000000000000000000000000000000000000000000000000000000",
    "00000000000000000000000000010000000000000000000000000000000000003000000000000000000000000000",
    "00030000000000000003000000010000000000000000000000000000000000000000000000000000000000000000",
    "00000000000000000000000000010000000000000000000000000000000000000000000000000000000000000000",
    "11111111111111111111111111110000011111111111111111111111111111111111111111111111111111111111",
    "00000000000000000000000000010000010000000000000000000000000000000000000000000000000000000000"
]

map3_man = [
    "0001001000",
    "0301301030",
    "0001001000",
    "1111001111",
    "0300000300",
    "0000000000",
    "1111001111",
    "0001001000",
    "0301301030",
    "0001001000",
]

map3 = [
    "0001001000",
    "0001001000",
    "0001001000",
    "1111001111",
    "0000000000",
    "0000000000",
    "1111001111",
    "0001001000",
    "0001001000",
    "0001001000",
]

#Configs
TERMINATE_FLOAT = 0.00001
TRANSMIT_POWER = 100
ROOM_MAP = map1
MANUAL_ROOM = map1_man
IS_EMPTY = True

#Globals
FIRST_COORD = None
ITER = 0
POINTS = []



#get reciever coords
R_COORD_LIST = []
scatterMap = [[]]
paremMap = []
if IS_EMPTY:
    #scattered receivers
    temp_stack = [3]
    for x in range(0, len(ROOM_MAP)):
        scatterMap.append([])
        for y_val in ROOM_MAP[x]:
            if temp_stack.pop() == 3:
                if y_val != '1':
                    scatterMap[x].append(3)
                else:
                    scatterMap[x].append(int(y_val))
                temp_stack.append(3)
                temp_stack.append(1)
                temp_stack.append(1)
            else:
                scatterMap[x].append(int(y_val))
    
    #receivers around border
    paremMap.append([])
    for x in range(0, len(ROOM_MAP[0])):
        paremMap[0].append(3)

    for x in range(1, len(ROOM_MAP)-1):
        paremMap.append([3])
        for y in range(1, len(ROOM_MAP[x])-1):
            paremMap[x].append(int(ROOM_MAP[x][y]))
        paremMap[x].append(3)

    paremMap.append([])
    for x in range(0, len(ROOM_MAP[0])):
        paremMap[len(paremMap)-1].append(3)
        

def getReceivers():
    global R_COORD_LIST
    for i in range( len(ROOM_MAP) ):
        for j in range( len(ROOM_MAP[i]) ):
            if ROOM_MAP[i][j] == 3:
                R_COORD_LIST.append( (i, j) )

def toMapArray(room):
    newArray = []
    for row in room:
        newArray.append([])
        for cell in row:
            newArray[len(newArray)-1].append(int(cell))
    return newArray

def printMap():
    for row in ROOM_MAP:
        printLine = ""
        for cell in row:
            printLine += str(cell)
        print(printLine)

def plot():
    obj_results = []
    iter_list = []
    for x in POINTS:
        iter_list.append( x[0] )
        obj_results.append( obj_f(x[1]) )
        
    plt.plot(iter_list, obj_results, alpha = 0.4,
         color ='red', linestyle ='dashed',
         linewidth = 2, marker ='D', 
         markersize = 5, markerfacecolor ='blue',
         markeredgecolor ='blue')
    plt.show()


def percentImprove(firstPow, finalPow):
    return int( (1.0 - (finalPow / firstPow)) * 100 )
    

# Center-value Distance = 
# map [y] [x]
def direct_search():
    MAX_X = len(ROOM_MAP)
    MAX_Y = len(ROOM_MAP[0])

    def callbackFn(x):
        POINTS.append( (ITER, x) )

    bounds = op.Bounds([0, 0], [MAX_X-1, MAX_Y-1])
    results = op.direct( obj_f, bounds, maxiter=5000, maxfun=5000, vol_tol=TERMINATE_FLOAT, callback=callbackFn )
    firstPow = obj_f(FIRST_COORD)
    print(f'start coord: {FIRST_COORD}')
    print(f'final coord: {results.x}')
    print(f'starting power: {firstPow}')
    print(f'optimal power: {results.fun}')
    print(f'improvement: {percentImprove(firstPow, results.fun)}%')
    print(f'iter: {results.nfev}')
    print(results.message)


def obj_f(t_coord):
    global FIRST_COORD
    global ITER
    if FIRST_COORD is None:
        FIRST_COORD = t_coord
    f_val = 0
    for receiver in R_COORD_LIST:
        f_val += TRANSMIT_POWER - signal_sim( (int(t_coord[0]), int(t_coord[1])), receiver, TRANSMIT_POWER, ROOM_MAP)
    f_val /= len(R_COORD_LIST)
    ITER += 1
    return f_val


def main_single():
    global ROOM_MAP
    ROOM_MAP = toMapArray()
    getReceivers()
    direct_search()
    print(obj_f( FIRST_COORD ))
    plot()

def main_two():
    global ROOM_MAP
    global POINTS
    global ITER
    global FIRST_COORD
    ROOM_MAP = scatterMap
    getReceivers()
    print("======================= Scatter =======================")
    print("MAP:")
    printMap()
    print("RESULTS:")
    direct_search()
    plot()

    POINTS = []
    ITER = 0
    FIRST_COORD = None
    ROOM_MAP = paremMap
    getReceivers()
    print("======================= Border =======================")
    print("MAP:")
    printMap()
    print("RESULTS:")
    direct_search()
    plot()

    POINTS = []
    ITER = 0
    FIRST_COORD = None
    ROOM_MAP = toMapArray(MANUAL_ROOM)
    getReceivers()
    print("======================= Manuel =======================")
    print("MAP:")
    printMap()
    print("RESULTS:")
    direct_search()
    plot()    
    

########## PROGRAM START #######################
#main_single()
main_two()
#ROOM_MAP = scatterMap
#printMap()
#ROOM_MAP = paremMap
#printMap()
#direct_search()
#print(type(FIRST_COORD))
#print(obj_f( (5, 5) ))
#print(FIRST_COORD)
#print(obj_f( FIRST_COORD ))
#print(obj_f( ( int(len(ROOM_MAP)/2), int(len(ROOM_MAP[0])/4) ) ))
#print( obj_f( (5, 5) ) )